# Pipeline de CI/CD para API de Login
# Este workflow automatiza la construcción, pruebas y despliegue de la aplicación

name: Login API - CI/CD Pipeline

# Definición de triggers: cuándo se ejecutará el pipeline
on:
  # Se ejecuta en push a las ramas principales
  push:
    branches:
      - main
      - develop
    # Opcional: ejecutar solo cuando cambien archivos específicos
    paths:
      - 'Backend/logueo-api/**'
      - '.github/workflows/**'
  
  # Se ejecuta en Pull Requests hacia main o develop
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'Backend/logueo-api/**'
  
  # Permite ejecución manual desde la interfaz de GitHub
  workflow_dispatch:

# Variables de entorno globales para todo el workflow
env:
  DOTNET_VERSION: '9.0.x'
  PROJECT_PATH: 'Backend/logueo-api'
  SOLUTION_FILE: 'Api.Login.sln'
  BUILD_CONFIGURATION: 'Release'

# Definición de trabajos del pipeline
jobs:
  
  # Job 1: Análisis de código y construcción
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
      # Paso 1: Checkout del código fuente
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Obtener historial completo para análisis
      
      # Paso 2: Configurar .NET SDK
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      
      # Paso 3: Restaurar dependencias con caché
      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-
      
      - name: Restore dependencies
        run: dotnet restore ${{ env.PROJECT_PATH }}/${{ env.SOLUTION_FILE }}
      
      # Paso 4: Construcción del proyecto
      - name: Build solution
        run: |
          dotnet build ${{ env.PROJECT_PATH }}/${{ env.SOLUTION_FILE }} \
            --configuration ${{ env.BUILD_CONFIGURATION }} \
            --no-restore
      
      # Paso 5: Ejecutar pruebas unitarias (cuando existan)
      # Nota: Actualmente el proyecto no tiene pruebas, pero está preparado para cuando se agreguen
      - name: Run unit tests
        run: |
          dotnet test ${{ env.PROJECT_PATH }}/${{ env.SOLUTION_FILE }} \
            --configuration ${{ env.BUILD_CONFIGURATION }} \
            --no-build \
            --verbosity normal \
            --logger "trx;LogFileName=test-results.trx" \
            --collect:"XPlat Code Coverage"
        continue-on-error: true  # No fallar si no hay tests
      
      # Paso 6: Publicar resultados de pruebas
      - name: Publish test results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: '**/test-results.trx'
        continue-on-error: true
      
      # Paso 7: Publicar la aplicación
      - name: Publish application
        run: |
          dotnet publish ${{ env.PROJECT_PATH }}/Api.Login/Api.Login.csproj \
            --configuration ${{ env.BUILD_CONFIGURATION }} \
            --output ${{ env.PROJECT_PATH }}/publish \
            --no-build
      
      # Paso 8: Subir artefactos para siguientes jobs
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: login-api-build
          path: ${{ env.PROJECT_PATH }}/publish
          retention-days: 7

  # Job 2: Análisis de seguridad y calidad de código
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      
      # Análisis de seguridad con herramientas de .NET
      - name: Security scan
        run: |
          dotnet list ${{ env.PROJECT_PATH }}/${{ env.SOLUTION_FILE }} package --vulnerable --include-transitive
        continue-on-error: true
      
      # Verificar formato de código
      - name: Check code formatting
        run: |
          dotnet format ${{ env.PROJECT_PATH }}/${{ env.SOLUTION_FILE }} \
            --verify-no-changes \
            --verbosity diagnostic
        continue-on-error: true

  # Job 3: Construcción de imagen Docker (opcional)
  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      # Login a Docker Hub o GitHub Container Registry
      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      # Extraer metadata para tags
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/login-api
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
      
      # Construir y pushear imagen
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ env.PROJECT_PATH }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Job 4: Despliegue a entorno de desarrollo
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [build, code-quality]
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    environment:
      name: development
      url: https://dev-api.tudominio.com
    
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: login-api-build
          path: ./publish
      
      # Ejemplo de despliegue (ajustar según tu infraestructura)
      - name: Deploy to development server
        run: |
          echo "Desplegando a servidor de desarrollo..."
          # Aquí iría tu script de despliegue real
          # Por ejemplo: scp, rsync, kubectl, az webapp, etc.
        env:
          DEPLOY_KEY: ${{ secrets.DEV_DEPLOY_KEY }}

  # Job 5: Despliegue a producción
  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, code-quality]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://api.tudominio.com
    
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: login-api-build
          path: ./publish
      
      - name: Deploy to production server
        run: |
          echo "Desplegando a servidor de producción..."
          # Script de despliegue a producción
        env:
          DEPLOY_KEY: ${{ secrets.PROD_DEPLOY_KEY }}
      
      # Notificación de despliegue exitoso
      - name: Notify deployment success
        if: success()
        run: |
          echo "Despliegue exitoso a producción"
          # Aquí puedes agregar notificaciones a Slack, Teams, etc.
