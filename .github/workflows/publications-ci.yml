# Pipeline de CI/CD solo para rama main (sin Docker)

name: Publications API - CI/CD Pipeline

on:
  push:
    branches:
      - main
    paths:
      - 'Backend/Explorify.Api.Plubications/**'
      - '.github/workflows/**'

  pull_request:
    branches:
      - main
    paths:
      - 'Backend/Explorify.Api.Plubications/**'

  workflow_dispatch:

env:
  DOTNET_VERSION: '9.0.x'
  PROJECT_PATH: Backend/Explorify.Api.Plubications
  SOLUTION_FILE: Explorify.Api.Plubications.sln
  BUILD_CONFIGURATION: Release

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        working-directory: ${{ env.PROJECT_PATH }}
        run: dotnet restore ${{ env.SOLUTION_FILE }}

      - name: Build solution
        working-directory: ${{ env.PROJECT_PATH }}
        run: dotnet build ${{ env.SOLUTION_FILE }} --configuration ${{ env.BUILD_CONFIGURATION }} --no-restore

      - name: Run unit tests
        working-directory: ${{ env.PROJECT_PATH }}
        run: dotnet test ${{ env.SOLUTION_FILE }} --configuration ${{ env.BUILD_CONFIGURATION }} --no-build --logger "trx;LogFileName=test-results.trx" --collect:"XPlat Code Coverage"
        continue-on-error: true

      - name: Publish application
        working-directory: ${{ env.PROJECT_PATH }}
        run: dotnet publish Explorify.Api.Plubications/Explorify.Api.Plubications.csproj --configuration ${{ env.BUILD_CONFIGURATION }} --output publish --no-build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: publications-api-build
          path: ${{ env.PROJECT_PATH }}/publish
          retention-days: 7

  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Security scan
        working-directory: ${{ env.PROJECT_PATH }}
        run: dotnet list ${{ env.SOLUTION_FILE }} package --vulnerable --include-transitive
        continue-on-error: true

      - name: Check code formatting
        working-directory: ${{ env.PROJECT_PATH }}
        run: dotnet format ${{ env.SOLUTION_FILE }} --verify-no-changes
        continue-on-error: true

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, code-quality]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: publications-api-build
          path: ./publish

      - name: Deploy to production server
        run: echo "ðŸš€ Desplegando a producciÃ³n..."
        env:
          DEPLOY_KEY: ${{ secrets.PROD_DEPLOY_KEY }}
