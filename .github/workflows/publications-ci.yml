# Pipeline de CI/CD para API de Publicaciones
# Automatiza build, pruebas, anÃ¡lisis y despliegue

name: Publications API - CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'Backend/Explorify.Api.Publications/**'
      - '.github/workflows/**'

  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'Backend/Explorify.Api.Publications/**'

  workflow_dispatch:

env:
  DOTNET_VERSION: '9.0.x'
  PROJECT_PATH: 'Backend/Explorify.Api.Publications'
  SOLUTION_FILE: 'Explorify.Api.Publications.sln'
  BUILD_CONFIGURATION: 'Release'

jobs:

  build:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore ${{ env.SOLUTION_FILE }}

      - name: Build solution
        run: |
          dotnet build ${{ env.SOLUTION_FILE }} \
            --configuration ${{ env.BUILD_CONFIGURATION }} \
            --no-restore

      - name: Run unit tests
        run: |
          dotnet test ${{ env.SOLUTION_FILE }} \
            --configuration ${{ env.BUILD_CONFIGURATION }} \
            --no-build \
            --verbosity normal \
            --logger "trx;LogFileName=test-results.trx" \
            --collect:"XPlat Code Coverage"
        continue-on-error: true

      - name: Publish test results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: '**/test-results.trx'
        continue-on-error: true

      - name: Publish application
        run: |
          dotnet publish ${{ env.PROJECT_PATH }}/Explorify.Api.Publications/Explorify.Api.Publications.csproj \
            --configuration ${{ env.BUILD_CONFIGURATION }} \
            --output ${{ env.PROJECT_PATH }}/publish \
            --no-build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: publications-api-build
          path: ${{ env.PROJECT_PATH }}/publish
          retention-days: 7

  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Security scan
        run: |
          dotnet list ${{ env.SOLUTION_FILE }} package --vulnerable --include-transitive
        continue-on-error: true

      - name: Check code formatting
        run: |
          dotnet format ${{ env.SOLUTION_FILE }} \
            --verify-no-changes \
            --verbosity diagnostic
        continue-on-error: true

  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/explorify-publications-api
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ env.PROJECT_PATH }}
          file: ${{ env.PROJECT_PATH }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [build, code-quality]
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    environment:
      name: development
    
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: publications-api-build
          path: ./publish

      - name: Deploy to development server
        run: |
          echo "Desplegando a dev..."
        env:
          DEPLOY_KEY: ${{ secrets.DEV_DEPLOY_KEY }}

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, code-quality]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: production
    
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: publications-api-build
          path: ./publish

      - name: Deploy to production server
        run: |
          echo "Desplegando a producciÃ³n..."
        env:
          DEPLOY_KEY: ${{ secrets.PROD_DEPLOY_KEY }}

      - name: Notify deployment success
        if: success()
        run: echo "ðŸš€ Despliegue exitoso"
